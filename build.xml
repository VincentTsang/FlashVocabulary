<project name="My Project" default="deploy" basedir=".">
	  <property file="build.properties"/>

	  <property environment="env"/>
	  <property name="java.home" value="${env.JAVA_HOME}"/>
	  <property name="webserver.home" value="${env.CATALINA_HOME}"/>
	  <property name="webserver.deploy" value="${webserver.home}/webapps"/>



	  <property name="app.name"      value="InstrumentManaSys"/>
	  <property name="app.path"      value="/${app.name}"/>
	  <property name="app.version"   value="0.1-dev"/>
	  <property name="war.name"      value="${app.name}.war"/>

	  <property name="src.home"      value="${basedir}/src"/>
	  <property name="lib.home"      value="${basedir}/WebRoot/WEB-INF/lib"/>
	  <property name="web.home"      value="${basedir}/WebRoot"/>
	  <property name="docs.home"     value="${basedir}/docs"/>

	  <property name="build.home"    value="${basedir}/build"/>
	  <property name="dist.home"     value="${basedir}/dist"/>

	  <property name="manager.url"      value="http://localhost:8080/manager"/>
	  <property name="manager.username" value="admin"/>
	  <property name="manager.password" value="admin"/>


	<!--  ==================== Compilation Control Options ==================== -->

	<!--
	  These properties control option settings on the Javac compiler when it
	  is invoked using the <javac> task.

	  compile.debug        Should compilation include the debug option?

	  compile.deprecation  Should compilation include the deprecation option?

	  compile.optimize     Should compilation include the optimize option?
	-->

	  <property name="compile.debug"       value="true"/>
	  <property name="compile.deprecation" value="false"/>
	  <property name="compile.optimize"    value="true"/>


	<!-- ==================== Compilation Classpath =========================== -->

	<!--
	  Rather than relying on the CLASSPATH environment variable, Ant includes
	  features that makes it easy to dynamically construct the classpath you
	  need for each compilation.  The example below constructs the compile
	  classpath to include the servlet.jar file, as well as the other components
	  that Tomcat makes available to web applications automatically, plus anything
	  that you explicitly added.
	-->

	  <path id="compile.classpath">

	    <!-- Include all JAR files that will be included in /WEB-INF/lib -->
	    <fileset dir="${lib.home}">
	      <include name="*.jar"/>
	    </fileset>

	    <!-- Include all elements that Tomcat exposes to applications -->
	    <pathelement location="${catalina.home}/common/classes"/>
	   <!-- <fileset dir="${webserver.home}/common/endorsed">
	      <include name="*.jar"/>
	    </fileset> 
	    <fileset dir="${webserver.home}/common/lib">
	      <include name="*.jar"/>
	    </fileset>
	    <pathelement location="${webserver.home}/shared/classes"/>
	    <fileset dir="${webserver.home}/shared/lib">
	      <include name="*.jar"/>
	    </fileset> -->

	  </path>


	<!-- ==================== Clean Target ==================================== -->

	<!--
	  The "clean" target deletes any previous "build" and "dist" directory,
	  so that you can be ensured the application can be built from scratch.
	-->

	  <target name="clean"
	          description="Delete old build and dist directories">
	    <delete dir="${build.home}"/>
	    <delete dir="${dist.home}"/>
	  </target>


	<!-- ==================== Prepare Target ================================== -->

	<!--
	  The "prepare" target is used to create the "build" destination directory,
	  and copy the static contents of your web application to it.  If you need
	  to copy static files from external dependencies, you can customize the
	  contents of this task.

	  Normally, this task is executed indirectly when needed.
	-->

	  <target name="prepare" depends="clean">

	    <!-- Create build directories as needed -->
	    <mkdir  dir="${build.home}"/>
	    <mkdir  dir="${build.home}/WEB-INF"/>
	    <mkdir  dir="${build.home}/WEB-INF/classes"/>
	    <mkdir  dir="${build.home}/WEB-INF/lib"/>

	    <!-- Copy static content of this web application -->
	    <copy todir="${build.home}">
	      <fileset dir="${web.home}"/>
	    </copy>

	    <!-- Copy external dependencies as required -->
	    <copy todir="${build.home}/WEB-INF/lib">
	      <fileset dir="${lib.home}"/>
	    </copy>

	    <!-- Copy static files from external dependencies as needed -->
	    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->

	  </target>


	<!-- ==================== Compile Target ================================== -->

	<!--
	  The "compile" target transforms source files (from your "src" directory)
	  into object files in the appropriate location in the build directory.
	  This example assumes that you will be including your classes in an
	  unpacked directory hierarchy under "/WEB-INF/classes".
	-->

	  <target name="compile" depends="prepare"
	          description="Compile Java sources">

	    <!-- Compile Java classes as necessary -->
	    <javac srcdir="${src.home}"
	          destdir="${build.home}/WEB-INF/classes"
	            debug="${compile.debug}"
	      deprecation="${compile.deprecation}"
	         optimize="${compile.optimize}">
	        <classpath refid="compile.classpath"/>
	    </javac>

	    <!-- Copy application resources -->
	    <copy  todir="${build.home}/WEB-INF/classes">
	      <fileset dir="${src.home}" excludes="**/*.java"/>
	    </copy>

	  </target>

	<!-- ==================== Javadoc Target ================================== -->
	  <target name="javadoc" depends="dist"
	          description="Create Javadoc API documentation">
	  	<mkdir   dir="${dist.home}/docs/api"/>
	    <javadoc sourcepath="${src.home}"
	                destdir="${dist.home}/docs/api"
	           packagenames="*">
	      <classpath refid="compile.classpath"/>
	    </javadoc>
	  </target>


	<!-- ==================== Dist Target ===================================== -->
	  <target name="dist" depends="compile"
	          description="Create binary distribution">

	    <!-- Copy documentation subdirectories -->
	    <mkdir   dir="${dist.home}/docs"/>
	    <copy    todir="${dist.home}/docs">
	      <fileset dir="${docs.home}"/>
	    </copy>

	    <!-- Create application JAR file -->
	    <jar jarfile="${dist.home}/${war.name}"
	         basedir="${build.home}"/>
	  </target>
	<!-- ====================Deploy  Target ================================== -->


	  <target name="deploy" depends="dist"
	          description="deploy application to servlet container">
	  	<copy file="${dist.home}/${war.name}" todir="${webserver.deploy}"/>
	  </target>

	<!-- ==================== Remove Target =================================== -->


	  <target name="remove"
	          description="Remove application on servlet container">

	    <undeploy url="${manager.url}"
	         username="${manager.username}"
	         password="${manager.password}"
	             path="${app.path}"/>

	  </target>


	</project>





